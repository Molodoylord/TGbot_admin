# main.py
import asyncio
import logging
import json
import hmac
import hashlib
import os
from os import getenv
from urllib.parse import unquote, parse_qsl
from collections import OrderedDict
from datetime import timedelta

import asyncpg
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode, ChatMemberStatus
from aiogram.filters import CommandStart, Command
from aiogram.types import (
    Message, WebAppInfo, InlineKeyboardMarkup, InlineKeyboardButton,
    ChatMemberUpdated, CallbackQuery, ChatPermissions, Update
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.client.default import DefaultBotProperties
from aiogram.exceptions import TelegramAPIError
from aiohttp import web
from dotenv import load_dotenv
import aiohttp_cors

import database

# --- 1. –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ì–ò–†–û–í–ê–ù–ò–Ø ---
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - [%(name)s] - %(message)s')
logger = logging.getLogger(__name__)
load_dotenv()

# --- 2. –ß–¢–ï–ù–ò–ï –ü–ï–†–ï–ú–ï–ù–ù–´–• ---
BOT_TOKEN = getenv("BOT_TOKEN")
# URL, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –¥–æ—Å—Ç—É–ø–Ω–æ –≤–∞—à–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://your-domain.com)
WEB_APP_URL = getenv("WEB_APP_URL")
# –•–æ—Å—Ç –∏ –ø–æ—Ä—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
WEB_SERVER_HOST = "0.0.0.0"
WEB_SERVER_PORT = getenv("PORT", "8080")

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Webhook ---
# –ü—É—Ç—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram. –î–µ–ª–∞–µ–º –µ–≥–æ "—Å–µ–∫—Ä–µ—Ç–Ω—ã–º" —Å –ø–æ–º–æ—â—å—é —Ç–æ–∫–µ–Ω–∞.
WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
# –ü–æ–ª–Ω—ã–π URL –¥–ª—è –≤–µ–±—Ö—É–∫–∞.
WEBHOOK_URL = f"{WEB_APP_URL.rstrip('/')}{WEBHOOK_PATH}"

# –ü—É—Ç—å –∫ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ
API_PATH = "/api/chat_info"

# --- 3. –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö –ë–ê–ó–ï –î–ê–ù–ù–´–• ---
DB_USER = getenv("DB_USER")
DB_PASS = getenv("DB_PASSWORD")
DB_NAME = getenv("DB_NAME")
DB_HOST = getenv("DB_HOST")
DB_PORT = getenv("DB_PORT")

if all([DB_USER, DB_PASS, DB_NAME, DB_HOST, DB_PORT]):
    DATABASE_URL = f"postgresql://{DB_USER}:{DB_PASS}@{DB_HOST}:{DB_PORT}/{DB_NAME}"
    logger.info("–°—Ç—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω–∞.")
else:
    logger.critical("–ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã! –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è.")
    exit()

# --- 4. –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ---
dp = Dispatcher()
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
chat_recent_members = {}
MAX_RECENT_MEMBERS_PER_CHAT = 100

# --- 5. –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---
def is_valid_init_data(init_data: str, bot_token: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –æ—Ç Telegram Web App."""
    try:
        parsed_data = dict(parse_qsl(unquote(init_data), keep_blank_values=True))
        received_hash = parsed_data.pop("hash")
        data_check_string = "\n".join(f"{k}={v}" for k, v in sorted(parsed_data.items()))
        secret_key = hmac.new("WebAppData".encode(), bot_token.encode(), hashlib.sha256).digest()
        calculated_hash = hmac.new(secret_key, data_check_string.encode(), hashlib.sha256).hexdigest()
        return calculated_hash == received_hash
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ initData: {e}")
        return False

async def is_user_admin_in_chat(user_id: int, chat_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º –≤ —á–∞—Ç–µ."""
    try:
        member = await bot.get_chat_member(chat_id=chat_id, user_id=user_id)
        return member.status in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR]
    except TelegramAPIError:
        return False

# --- 6. –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô –ë–û–¢–ê (Handlers) ---
@dp.message(CommandStart(), F.chat.type == "private")
async def command_start_handler(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–∞–º–∏.\n\n"
        "1. –î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ —Å–≤–æ—é –≥—Ä—É–ø–ø—É.\n"
        "2. –î–∞–π—Ç–µ –º–Ω–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –±–∞–Ω–∞ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤).\n"
        "3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /admin –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."
    )

@dp.my_chat_member()
async def on_my_chat_member(update: ChatMemberUpdated, db_pool: asyncpg.Pool):
    chat_id, chat_title = update.chat.id, update.chat.title
    new_status = update.new_chat_member.status
    if new_status == ChatMemberStatus.ADMINISTRATOR:
        await database.add_chat(db_pool, chat_id, chat_title)
        me = await bot.get_me()
        can_ban = update.new_chat_member.can_ban_members
        can_restrict = update.new_chat_member.can_restrict_members
        status_text = f"‚úÖ –ü–∞–Ω–µ–ª—å –¥–ª—è –≥—Ä—É–ø–ø—ã '{chat_title}' –∞–∫—Ç–∏–≤–Ω–∞.\n"
        status_text += "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –≤—ã–∑–≤–∞—Ç—å –µ—ë –∫–æ–º–∞–Ω–¥–æ–π /admin –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å–æ –º–Ω–æ–π."
        if not can_ban or not can_restrict:
            status_text += "\n\n‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –ú–Ω–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π:\n"
            if not can_ban: status_text += "- <b>–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</b>\n"
            if not can_restrict: status_text += "- <b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</b>\n"
            status_text += "–ö–Ω–æ–ø–∫–∏ –≤ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å."
        keyboard = InlineKeyboardBuilder().button(text="ü§ñ –ü–µ—Ä–µ–π—Ç–∏ –∫ –±–æ—Ç—É", url=f"https://t.me/{me.username}?start=group_admin")
        await bot.send_message(update.chat.id, status_text, reply_markup=keyboard.as_markup())
    elif new_status in [ChatMemberStatus.MEMBER, ChatMemberStatus.LEFT, ChatMemberStatus.KICKED]:
        await database.remove_chat(db_pool, chat_id)
        if chat_id in chat_recent_members: del chat_recent_members[chat_id]

@dp.message(Command("admin"), F.chat.type == "private")
async def command_admin_panel(message: Message, db_pool: asyncpg.Pool):
    user_id = message.from_user.id
    all_managed_chats = await database.get_managed_chats(db_pool)
    admin_in_chats = []
    check_tasks = [is_user_admin_in_chat(user_id, chat['chat_id']) for chat in all_managed_chats]
    results = await asyncio.gather(*check_tasks, return_exceptions=True)
    for i, res in enumerate(results):
        if isinstance(res, Exception):
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–ª—è —á–∞—Ç–∞ {all_managed_chats[i]['chat_id']}: {res}")
            continue
        if res:
            admin_in_chats.append(all_managed_chats[i])
    if not admin_in_chats:
        return await message.answer("–Ø –Ω–µ –Ω–∞—à–µ–ª –≥—Ä—É–ø–ø, –≥–¥–µ –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏ —è —Ç–æ–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω —Å –Ω—É–∂–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏.")
    builder = InlineKeyboardBuilder()
    for chat in admin_in_chats:
        builder.button(text=chat['chat_title'], callback_data=f"manage_chat_{chat['chat_id']}")
    builder.adjust(1)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", reply_markup=builder.as_markup())

@dp.callback_query(F.data.startswith("manage_chat_"))
async def select_chat_callback(query: CallbackQuery, db_pool: asyncpg.Pool):
    chat_id = int(query.data.split("_")[2])
    if not await is_user_admin_in_chat(user_id=query.from_user.id, chat_id=chat_id):
        return await query.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤ —ç—Ç–æ–º —á–∞—Ç–µ.", show_alert=True)
    chats = await database.get_managed_chats(db_pool)
    chat_title = next((c['chat_title'] for c in chats if c['chat_id'] == chat_id), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–∞—Ç")
    url = f"{WEB_APP_URL.rstrip('/')}?chat_id={chat_id}"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text=f"üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å '{chat_title}'", web_app=WebAppInfo(url=url))]])
    await query.message.edit_text(f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–æ–π <b>{chat_title}</b>.", reply_markup=keyboard)
    await query.answer()

@dp.message(F.chat.type.in_(['group', 'supergroup']), ~F.text.startswith('/'))
async def remember_member_handler(message: Message):
    chat_id = message.chat.id
    user = message.from_user
    if user.is_bot: return
    if chat_id not in chat_recent_members:
        chat_recent_members[chat_id] = OrderedDict()
    user_info = {"id": user.id, "first_name": user.first_name, "last_name": user.last_name or "", "username": user.username or ""}
    chat_recent_members[chat_id][user.id] = user_info
    chat_recent_members[chat_id].move_to_end(user.id)
    while len(chat_recent_members[chat_id]) > MAX_RECENT_MEMBERS_PER_CHAT:
        chat_recent_members[chat_id].popitem(last=False)

@dp.message(F.web_app_data)
async def web_app_data_handler(message: Message, db_pool: asyncpg.Pool):
    admin_id = message.from_user.id
    logger.info(f"--- –ü–û–õ–£–ß–ï–ù –ó–ê–ü–†–û–° –û–¢ WEBAPP –æ—Ç {admin_id} ---")
    try:
        data = json.loads(message.web_app_data.data)
        action = data.get("action")
        user_id_to_moderate = data.get("user_id")
        chat_id_str = data.get("chat_id")
        if not all([action, user_id_to_moderate, chat_id_str]):
            raise ValueError(f"–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç WebApp: {data}")
        chat_id = int(chat_id_str)
        if not await is_user_admin_in_chat(user_id=admin_id, chat_id=chat_id):
            logger.warning(f"–û–¢–ö–ê–ó: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {admin_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º –≤ —á–∞—Ç–µ {chat_id}.")
            return await message.answer("<b>–û—à–∏–±–∫–∞ –ø—Ä–∞–≤:</b> –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ —Ü–µ–ª–µ–≤–æ–º —á–∞—Ç–µ.")
        
        user_to_moderate_info = await bot.get_chat(user_id_to_moderate)
        user_name = user_to_moderate_info.full_name
        user_mention = f"<a href='tg://user?id={user_id_to_moderate}'>{user_name}</a>"
        admin_mention = message.from_user.full_name

        try:
            if action == "ban":
                await bot.ban_chat_member(chat_id=chat_id, user_id=user_id_to_moderate)
                await database.ban_user(db_pool, chat_id, user_id_to_moderate, admin_id)
                await bot.send_message(chat_id, f"üö´ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_mention} –∑–∞–±–∞–Ω–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_mention}.")
                await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{user_name}</b> —É—Å–ø–µ—à–Ω–æ –∑–∞–±–∞–Ω–µ–Ω.")
            elif action == "kick":
                await bot.ban_chat_member(chat_id=chat_id, user_id=user_id_to_moderate)
                await bot.unban_chat_member(chat_id=chat_id, user_id=user_id_to_moderate, only_if_banned=True)
                await bot.send_message(chat_id, f"üëã –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_mention} –∏—Å–∫–ª—é—á–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_mention}.")
                await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{user_name}</b> —É—Å–ø–µ—à–Ω–æ –∫–∏–∫–Ω—É—Ç.")
            elif action == "warn":
                await bot.send_message(chat_id, f"‚ö†Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_mention} –≤—ã–Ω–µ—Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_mention}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–±–ª—é–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞.")
                await message.answer(f"‚úÖ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <b>{user_name}</b> –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
            elif action == "mute":
                await bot.restrict_chat_member(
                    chat_id=chat_id, user_id=user_id_to_moderate,
                    permissions=ChatPermissions(can_send_messages=False),
                    until_date=timedelta(hours=1)
                )
                await bot.send_message(chat_id, f"üîá –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_mention} –æ–≥—Ä–∞–Ω–∏—á–∏–ª –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–∏—Å–∞—Ç—å –¥–ª—è {user_mention} –Ω–∞ 1 —á–∞—Å.")
                await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{user_name}</b> –±—ã–ª –∑–∞–≥–ª—É—à–µ–Ω –Ω–∞ 1 —á–∞—Å.")
            else:
                raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: `{action}`")
        except TelegramAPIError as e:
            logger.error(f"–û–®–ò–ë–ö–ê API TELEGRAM –ø—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–∏ '{action}': {e.message}")
            await message.answer(
                f"‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ '{action}'.</b>\n"
                f"<b>–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç Telegram:</b> {e.message}\n\n"
                f"<i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ.</i>"
            )
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ web_app_data_handler: {e}", exc_info=True)
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
    finally:
        logger.info("--- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç WebApp –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ---")

# --- 7. API –î–õ–Ø WEB APP (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
async def get_chat_info_api_handler(request: web.Request):
    db_pool = request.app['db_pool']
    bot_from_app = request.app["bot"]
    auth_header = request.headers.get("Authorization")
    if not auth_header or not auth_header.startswith("tma "):
        return web.json_response({"error": "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (initData)"}, status=401)
    init_data = auth_header.split(" ", 1)[1]
    if not is_valid_init_data(init_data, bot_from_app.token):
        return web.json_response({"error": "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (initData)"}, status=403)
    try:
        chat_id = int(request.query.get("chat_id"))
        query_params = dict(parse_qsl(unquote(init_data)))
        user_info = json.loads(query_params.get("user", "{}"))
        user_id = user_info.get("id")
        if not user_id or not await is_user_admin_in_chat(user_id=user_id, chat_id=chat_id):
            return web.json_response({"error": "–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —á–∞—Ç–∞"}, status=403)
        
        chat_info_db = await db_pool.fetchrow("SELECT chat_title FROM managed_chats WHERE chat_id = $1", chat_id)
        if not chat_info_db: return web.json_response({"error": "–ë–æ—Ç –Ω–µ —É–ø—Ä–∞–≤–ª—è–µ—Ç —ç—Ç–∏–º —á–∞—Ç–æ–º"}, status=404)
        
        all_members = OrderedDict()
        admins = await bot_from_app.get_chat_administrators(chat_id)
        for admin in admins:
            if admin.user.is_bot: continue
            all_members[admin.user.id] = {"id": admin.user.id, "first_name": admin.user.first_name, "last_name": admin.user.last_name or "", "username": admin.user.username or ""}
        
        if chat_id in chat_recent_members:
            for recent_user_id, recent_user_info in reversed(chat_recent_members[chat_id].items()):
                if recent_user_id not in all_members: all_members[recent_user_id] = recent_user_info
        
        final_list = []
        for user_id_key, user in all_members.items():
            user['is_banned'] = await database.is_user_banned(db_pool, chat_id, user['id'])
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–π URL —Ñ–æ—Ç–æ
            try:
                user_profile_photos = await bot.get_user_profile_photos(user_id_key, limit=1)
                if user_profile_photos.photos:
                    file = await bot.get_file(user_profile_photos.photos[0][-1].file_id)
                    user['photo_url'] = f"https://api.telegram.org/file/bot{bot.token}/{file.file_path}"
                else:
                    user['photo_url'] = None
            except Exception:
                user['photo_url'] = None

            final_list.append(user)
        
        return web.json_response({"chat_title": chat_info_db['chat_title'], "members": final_list})
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ API: {e}", exc_info=True)
        return web.json_response({"error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"}, status=500)

async def index_handler(request: web.Request):
    index_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'index.html')
    try:
        return web.FileResponse(index_path)
    except FileNotFoundError:
        logger.error(f"–§–∞–π–ª index.html –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {index_path}")
        return web.Response(text='index.html not found', status=404)

# --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Webhook ---
async def webhook_route_handler(request: web.Request):
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram –∏ –ö–û–†–†–ï–ö–¢–ù–û –ø–µ—Ä–µ–¥–∞–µ—Ç –∏—Ö –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è aiohttp
        db_pool = request.app['db_pool']
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ, —Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Update
        update_data = await request.json()
        logger.info(f"–ü–û–õ–£–ß–ï–ù WEBHOOK: {update_data}")
        update = Update.model_validate(update_data, context={"bot": bot})
        
        # **–ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï**: –ü–µ—Ä–µ–¥–∞–µ–º –∏ update, –∏ db_pool –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
        # –¢–µ–ø–µ—Ä—å aiogram —Å–º–æ–∂–µ—Ç –ø–µ—Ä–µ–¥–∞—Ç—å db_pool –≤ –Ω—É–∂–Ω—ã–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã
        await dp.feed_update(update, db_pool=db_pool)
        
        return web.Response()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ webhook: {e}", exc_info=True)
        return web.Response(status=500)

# --- 8. –ó–ê–ü–£–°–ö –ë–û–¢–ê –ò –í–ï–ë-–°–ï–†–í–ï–†–ê ---
async def on_startup(app: web.Application):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    logger.info("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook...")
    await bot.set_webhook(
        url=WEBHOOK_URL,
        allowed_updates=dp.resolve_used_update_types(),
        drop_pending_updates=True
    )
    logger.info(f"Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ URL: {WEBHOOK_URL}")

async def on_shutdown(app: web.Application):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è... –£–¥–∞–ª–µ–Ω–∏–µ webhook.")
    await bot.delete_webhook()
    
    db_pool = app.get('db_pool')
    if db_pool:
        await db_pool.close()
    logger.info("–ü—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –ë–î –∑–∞–∫—Ä—ã—Ç.")
    await bot.session.close()
    logger.info("–°–µ—Å—Å–∏—è –±–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞.")


async def main():
    if not all([BOT_TOKEN, DATABASE_URL, WEB_APP_URL]):
        logger.critical("–û–¥–Ω–∞ –∏–∑ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (BOT_TOKEN, DATABASE_URL, WEB_APP_URL)! –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
        return

    try:
        db_pool = await asyncpg.create_pool(DATABASE_URL)
        await database.init_db(db_pool)
        logger.info("–ü—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –ë–î —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ —Ç–∞–±–ª–∏—Ü—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.")
    except Exception as e:
        logger.critical(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}", exc_info=True)
        exit(1)
    
    app = web.Application()
    app["bot"] = bot
    app["db_pool"] = db_pool
    
    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)

    app.router.add_get('/', index_handler)
    app.router.add_get(API_PATH, get_chat_info_api_handler)
    app.router.add_post(WEBHOOK_PATH, webhook_route_handler)

    cors = aiohttp_cors.setup(app, defaults={
        "*": aiohttp_cors.ResourceOptions(
            allow_credentials=True, 
            expose_headers="*", 
            allow_headers="*", 
            allow_methods="*"
        )
    })
    for route in list(app.router.routes()):
        cors.add(route)

    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, WEB_SERVER_HOST, int(WEB_SERVER_PORT))
    
    logger.info(f"–í–µ–±-—Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤–∏—Ç—Å—è –∫ –∑–∞–ø—É—Å–∫—É –Ω–∞ http://{WEB_SERVER_HOST}:{WEB_SERVER_PORT}")
    await site.start()
    logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ.")
    
    await asyncio.Event().wait()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")


