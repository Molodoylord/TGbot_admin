# main.py
import asyncio
import logging
import json
import hmac
import hashlib
from os import getenv
from urllib.parse import unquote, parse_qsl
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode, ChatMemberStatus
from aiogram.filters import CommandStart, Command
from aiogram.types import (
    Message, WebAppInfo, InlineKeyboardMarkup, InlineKeyboardButton,
    ChatMemberUpdated, CallbackQuery
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.client.default import DefaultBotProperties
from aiogram.exceptions import TelegramAPIError
from aiohttp import web
from dotenv import load_dotenv
import aiohttp_cors
import os

# --- 1. –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ì–ò–†–û–í–ê–ù–ò–Ø –ò –ü–ï–†–ï–ú–ï–ù–ù–´–• ---
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - [%(name)s] - %(message)s'
)
logger = logging.getLogger(__name__)
load_dotenv()

# --- 2. –ß–¢–ï–ù–ò–ï –ü–ï–†–ï–ú–ï–ù–ù–´–• –ò–ó .ENV ---
BOT_TOKEN = getenv("BOT_TOKEN")
# ADMIN_ID –±–æ–ª—å—à–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–∏–∫–∏.
# –ï–≥–æ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–∏—á–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å—Ç–∞—Ç—É—Å–µ –±–æ—Ç–∞.
ADMIN_ID = getenv("ADMIN_ID")
WEB_APP_URL = getenv("WEB_APP_URL")
BASE_WEBHOOK_URL = getenv("BASE_WEBHOOK_URL")
WEBHOOK_SECRET = getenv("WEBHOOK_SECRET", "your-super-secret-string-for-security")
WEB_SERVER_HOST = "0.0.0.0"
WEB_SERVER_PORT = "8080"
API_PATH = "/api/chat_info"

# --- 3. –ü–†–û–í–ï–†–ö–ê –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–• –ü–ï–†–ï–ú–ï–ù–ù–´–• ---
if not all([BOT_TOKEN, WEB_APP_URL, BASE_WEBHOOK_URL]):
    logger.critical("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ .env –∑–∞–≥—Ä—É–∂–µ–Ω—ã (BOT_TOKEN, WEB_APP_URL, BASE_WEBHOOK_URL)!")
    exit()

# –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º ADMIN_ID –≤ —á–∏—Å–ª–æ, –µ—Å–ª–∏ –æ–Ω –∑–∞–¥–∞–Ω
if ADMIN_ID:
    try:
        ADMIN_ID = int(ADMIN_ID)
    except (ValueError, TypeError):
        logger.warning(f"–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è ADMIN_ID ('{ADMIN_ID}') —É–∫–∞–∑–∞–Ω–∞, –Ω–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º. –õ–∏—á–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å.")
        ADMIN_ID = None

# --- 4. –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê –ò –î–ò–°–ü–ï–¢–ß–ï–†–ê ---
managed_chats = {}
dp = Dispatcher()
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))

logger.info(f"–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —Ç–æ–∫–µ–Ω–æ–º: {BOT_TOKEN[:10]}...")
logger.info(f"WEB_APP_URL: {WEB_APP_URL}")

# --- 5. –§–£–ù–ö–¶–ò–ò –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò –ò –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---

def is_valid_init_data(init_data: str, bot_token: str) -> bool:
    """
    –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É initData –∏–∑ Telegram Web App.
    """
    try:
        parsed_data = dict(parse_qsl(unquote(init_data), keep_blank_values=True))
        received_hash = parsed_data.pop("hash")
        data_check_string = "\n".join(f"{k}={v}" for k, v in sorted(parsed_data.items()))
        secret_key = hmac.new("WebAppData".encode(), bot_token.encode(), hashlib.sha256).digest()
        calculated_hash = hmac.new(secret_key, data_check_string.encode(), hashlib.sha256).hexdigest()
        return calculated_hash == received_hash
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ initData: {e}")
        return False

async def is_user_admin_in_chat(user_id: int, chat_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –≤ —á–∞—Ç–µ.
    """
    try:
        member = await bot.get_chat_member(chat_id=chat_id, user_id=user_id)
        return member.status in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR]
    except TelegramAPIError as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–Ω–∏–∫–∞ {user_id} –≤ —á–∞—Ç–µ {chat_id}: {e}")
        return False

# --- 6. –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô –ë–û–¢–ê (Handlers) ---

@dp.my_chat_member()
async def on_my_chat_member(update: ChatMemberUpdated):
    """
    –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ –±–æ—Ç–∞ –∏–∑ —á–∞—Ç–æ–≤.
    """
    chat_id = update.chat.id
    chat_title = update.chat.title

    # –ï—Å–ª–∏ –±–æ—Ç–∞ –Ω–∞–∑–Ω–∞—á–∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if update.new_chat_member.status == ChatMemberStatus.ADMINISTRATOR:
        managed_chats[chat_id] = chat_title
        logger.info(f"–ë–æ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ —á–∞—Ç–µ '{chat_title}' (ID: {chat_id}).")
        await bot.send_message(chat_id, f"‚úÖ –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã <b>{chat_title}</b> —Ç–µ–ø–µ—Ä—å –∞–∫—Ç–∏–≤–Ω–∞. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –≤—ã–∑–≤–∞—Ç—å –µ—ë –∫–æ–º–∞–Ω–¥–æ–π /admin –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å–æ –º–Ω–æ–π.")

    # –ï—Å–ª–∏ –±–æ—Ç–∞ —É–¥–∞–ª–∏–ª–∏ –∏–ª–∏ –ª–∏—à–∏–ª–∏ –ø—Ä–∞–≤
    elif update.new_chat_member.status in [ChatMemberStatus.MEMBER, ChatMemberStatus.LEFT, ChatMemberStatus.KICKED]:
        if chat_id in managed_chats:
            removed_chat_title = managed_chats.pop(chat_id)
            logger.info(f"–ë–æ—Ç —É–¥–∞–ª–µ–Ω –∏–ª–∏ –ª–∏—à–µ–Ω –ø—Ä–∞–≤ –≤ —á–∞—Ç–µ '{removed_chat_title}'.")
            if ADMIN_ID: # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ "—Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω—É", –µ—Å–ª–∏ –æ–Ω –∑–∞–¥–∞–Ω
                 await bot.send_message(ADMIN_ID, f"‚ùå –Ø –±–æ–ª—å—à–µ –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤ –≥—Ä—É–ø–ø–µ: <b>{removed_chat_title}</b>.")

@dp.message(CommandStart())
async def command_start_handler(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start. –î–æ—Å—Ç—É–ø–µ–Ω –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
    """
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    await message.answer(f"üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–∞–º–∏. –ï—Å–ª–∏ –≤—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≥—Ä—É–ø–ø—ã, –≥–¥–µ —è —Ç–æ–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")

@dp.message(Command("admin"))
async def command_admin_panel(message: Message):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø, –≥–¥–µ –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º. –î–æ—Å—Ç—É–ø–µ–Ω –≤—Å–µ–º.
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –±—É–¥–µ—Ç –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≥—Ä—É–ø–ø—ã.
    """
    if not managed_chats:
        return await message.answer("–Ø –ø–æ–∫–∞ –Ω–µ —É–ø—Ä–∞–≤–ª—è—é –Ω–∏ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–æ–π. –°–¥–µ–ª–∞–π—Ç–µ –º–µ–Ω—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ –Ω—É–∂–Ω–æ–º —á–∞—Ç–µ, –∏ –æ–Ω –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å.")

    builder = InlineKeyboardBuilder()
    for chat_id, chat_title in managed_chats.items():
        builder.button(text=chat_title, callback_data=f"manage_chat_{chat_id}")
    builder.adjust(1)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è. –î–æ—Å—Ç—É–ø –∫ –ø–∞–Ω–µ–ª–∏ –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã:", reply_markup=builder.as_markup())

@dp.callback_query(F.data.startswith("manage_chat_"))
async def select_chat_callback(query: CallbackQuery):
    """
    –û—Ç–∫—Ä—ã–≤–∞–µ—Ç Web App –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞.
    """
    chat_id = int(query.data.split("_")[2])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º —ç—Ç–æ–≥–æ —á–∞—Ç–∞
    if not await is_user_admin_in_chat(user_id=query.from_user.id, chat_id=chat_id):
        return await query.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ.", show_alert=True)
    
    chat_title = managed_chats.get(chat_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–∞—Ç")
    url = f"{WEB_APP_URL.rstrip('/')}?chat_id={chat_id}"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(
            text=f"üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å –¥–ª—è '{chat_title}'",
            web_app=WebAppInfo(url=url)
        )
    ]])
    await query.message.edit_text(f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–æ–π <b>{chat_title}</b>.", reply_markup=keyboard)
    await query.answer()

@dp.message(F.web_app_data)
async def web_app_data_handler(message: Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∏–∑ Web App (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–æ–º–∞–Ω–¥—É 'ban').
    """
    try:
        data = json.loads(message.web_app_data.data)
        logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ Web App: {data}")

        action = data.get("action")
        user_id_to_moderate = data.get("user_id")
        chat_id = data.get("chat_id")
        admin_id = message.from_user.id # ID —Ç–æ–≥–æ, –∫—Ç–æ –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –≤ Web App

        if not all([action, user_id_to_moderate, chat_id]):
            raise ValueError("–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ WebApp")

        # –ö–ª—é—á–µ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –æ—Ç–ø—Ä–∞–≤–∏–≤—à–∏–π –∫–æ–º–∞–Ω–¥—É, –º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —á–∞—Ç
        if not await is_user_admin_in_chat(user_id=admin_id, chat_id=int(chat_id)):
             await message.answer(f"‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ. –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —á–∞—Ç–µ {chat_id}.")
             return

        if action == "ban":
            await bot.ban_chat_member(chat_id=chat_id, user_id=user_id_to_moderate)
            await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id_to_moderate} –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω –≤ —á–∞—Ç–µ {chat_id}.")
        elif action == "kick":
            # Kick - —ç—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±–∞–Ω, –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è unban
            await bot.ban_chat_member(chat_id=chat_id, user_id=user_id_to_moderate)
            await bot.unban_chat_member(chat_id=chat_id, user_id=user_id_to_moderate)
            await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id_to_moderate} –±—ã–ª –∫–∏–∫–Ω—É—Ç –∏–∑ —á–∞—Ç–∞ {chat_id}.")
        else:
             await message.answer(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Web App: {e}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è.")


# --- 7. API –î–õ–Ø WEB APP (HTTP-—Å–µ—Ä–≤–µ—Ä) ---

async def get_chat_info_api_handler(request: web.Request):
    """
    API —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è Web App. –û—Ç–¥–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –∏ –µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö.
    """
    bot_from_app = request.app["bot"]
    auth_header = request.headers.get("Authorization")

    if not auth_header or not auth_header.startswith("tma "):
        return web.json_response({"error": "Authorization required"}, status=401)
    
    init_data = auth_header.split(" ", 1)[1]
    if not is_valid_init_data(init_data, bot_from_app.token):
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º initData.")
        return web.json_response({"error": "Invalid initData"}, status=403)

    try:
        chat_id_str = request.query.get("chat_id")
        if not chat_id_str:
            return web.json_response({"error": "chat_id is required"}, status=400)
        chat_id = int(chat_id_str)
        
        user_info_raw = dict(parse_qsl(unquote(init_data))).get("user", "{}")
        user_info = json.loads(user_info_raw)
        user_id = user_info.get("id")

        if not user_id:
            return web.json_response({"error": "Invalid user data in initData"}, status=403)

        # –ì–ª–∞–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –æ—Ç–∫—Ä—ã–≤—à–∏–π WebApp, –∞–¥–º–∏–Ω–æ–º –≤ —á–∞—Ç–µ
        if not await is_user_admin_in_chat(user_id=user_id, chat_id=chat_id):
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —á–∞—Ç—É {chat_id} –±–µ–∑ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return web.json_response({"error": "Admin access required"}, status=403)
        
        chat_info = await bot_from_app.get_chat(chat_id)
        # –ü–æ–ª—É—á–∞–µ–º –í–°–ï–• –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —á–∞—Ç–∞
        admins = await bot_from_app.get_chat_administrators(chat_id)
        members = []
        for admin in admins:
            if admin.user.is_bot: continue # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–æ—Ç–æ–≤

            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è
                profile_photos = await bot_from_app.get_user_profile_photos(admin.user.id, limit=1)
                photo_url = None
                if profile_photos.photos:
                    file_info = await bot_from_app.get_file(profile_photos.photos[0][-1].file_id)
                    photo_url = f"https://api.telegram.org/file/bot{bot_from_app.token}/{file_info.file_path}"
            except Exception:
                photo_url = None # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞
            
            members.append({
                "id": admin.user.id,
                "first_name": admin.user.first_name,
                "last_name": admin.user.last_name or "",
                "username": admin.user.username or "",
                "photo_url": photo_url
            })
            
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —á–∞—Ç–∞ '{chat_info.title}'. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}. –ù–∞–π–¥–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {len(members)}")
        return web.json_response({
            "chat_title": chat_info.title,
            "members": members
        })

    except ValueError:
         return web.json_response({"error": "Invalid chat_id"}, status=400)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ: {e}", exc_info=True)
        return web.json_response({"error": "Internal server error"}, status=500)

async def index_handler(request: web.Request):
    """–û—Ç–¥–∞–µ—Ç —Ñ–∞–π–ª index.html"""
    index_path = os.path.join(os.path.dirname(__file__), 'index.html')
    try:
        with open(index_path, 'r', encoding='utf-8') as f:
            html = f.read()
        return web.Response(text=html, content_type='text/html')
    except Exception as e:
        return web.Response(text=f'–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ index.html: {e}', status=500)

# --- 8. –ó–ê–ü–£–°–ö –ë–û–¢–ê –ò –í–ï–ë-–°–ï–†–í–ï–†–ê ---

async def on_startup(app: web.Application):
    logger.info("–í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–ø—Ä–∞–≤–ª—è–µ–º—ã—Ö —á–∞—Ç–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ (–µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ)
    # –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ —Ñ–∞–π–ª–∞
    # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º

async def on_shutdown(app: web.Application):
    logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞...")

def main():
    app = web.Application()
    app["bot"] = bot
    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)
    
    app.router.add_get('/', index_handler)
    app.router.add_get(API_PATH, get_chat_info_api_handler)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
    cors = aiohttp_cors.setup(app, defaults={
        "*": aiohttp_cors.ResourceOptions(
            allow_credentials=True, expose_headers="*", allow_headers="*", allow_methods="*"
        )
    })
    for route in list(app.router.routes()):
        cors.add(route)
    
    async def start_bot_and_server():
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
        runner = web.AppRunner(app)
        await runner.setup()
        site = web.TCPSite(runner, WEB_SERVER_HOST, int(WEB_SERVER_PORT))
        await site.start()
        logger.info(f"–í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://{WEB_SERVER_HOST}:{WEB_SERVER_PORT}")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        try:
            me = await bot.get_me()
            logger.info(f"–ë–æ—Ç @{me.username} —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω!")
            logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ long polling...")
            await dp.start_polling(bot)
        finally:
            await runner.cleanup()

    try:
        asyncio.run(start_bot_and_server())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")

if __name__ == "__main__":
    main()


