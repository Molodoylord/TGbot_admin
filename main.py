import asyncio
import logging
import json
import hmac
import hashlib
import os
from os import getenv
from urllib.parse import urljoin, parse_qsl

from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode, ChatMemberStatus
from aiogram.filters import CommandStart, Command, Filter
from aiogram.types import Message, WebAppInfo, InlineKeyboardMarkup, InlineKeyboardButton, ChatMemberUpdated, \
    CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.client.default import DefaultBotProperties
from aiogram.exceptions import TelegramAPIError

from aiohttp import web
from dotenv import load_dotenv
import aiohttp_cors

# --- –ù–ê–°–¢–†–û–ô–ö–ê ---
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - [%(name)s] - %(message)s')
logger = logging.getLogger(__name__)
load_dotenv()

# --- –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø ---
BOT_TOKEN = getenv("BOT_TOKEN")
WEB_APP_URL = getenv("WEB_APP_URL")
BASE_WEBHOOK_URL = getenv("BASE_WEBHOOK_URL")
WEB_SERVER_HOST = "0.0.0.0"
WEB_SERVER_PORT = int(getenv("WEB_SERVER_PORT", 8080))
WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
WEBHOOK_SECRET = getenv("WEBHOOK_SECRET", "your-super-secret-string")
ADMIN_ID = getenv("ADMIN_ID")
CHATS_DATA_FILE = "managed_chats.json"  # –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∞—Ç–æ–≤

if not all([BOT_TOKEN, WEB_APP_URL, BASE_WEBHOOK_URL, ADMIN_ID]):
    logger.critical("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ .env –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
    exit()

ADMIN_ID = int(ADMIN_ID)


# --- –£–ü–†–ê–í–õ–ï–ù–ò–ï –ß–ê–¢–ê–ú–ò (–° –°–û–•–†–ê–ù–ï–ù–ò–ï–ú –í –§–ê–ô–õ) ---

def load_managed_chats() -> dict:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —É–ø—Ä–∞–≤–ª—è–µ–º—ã–µ —á–∞—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞ JSON."""
    if not os.path.exists(CHATS_DATA_FILE):
        return {}
    try:
        with open(CHATS_DATA_FILE, 'r', encoding='utf-8') as f:
            data = json.load(f)
            # JSON —Ö—Ä–∞–Ω–∏—Ç –∫–ª—é—á–∏ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏—Ö –æ–±—Ä–∞—Ç–Ω–æ –≤ int
            return {int(k): v for k, v in data.items()}
    except (json.JSONDecodeError, IOError) as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Å —á–∞—Ç–∞–º–∏ ({CHATS_DATA_FILE}): {e}")
        return {}


def save_managed_chats(chats: dict):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —É–ø—Ä–∞–≤–ª—è–µ–º—ã–µ —á–∞—Ç—ã –≤ —Ñ–∞–π–ª JSON."""
    try:
        with open(CHATS_DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(chats, f, ensure_ascii=False, indent=4)
    except IOError as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª —Å —á–∞—Ç–∞–º–∏ ({CHATS_DATA_FILE}): {e}")


# –ó–∞–≥—Ä—É–∂–∞–µ–º —á–∞—Ç—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
managed_chats = load_managed_chats()
logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(managed_chats)} —É–ø—Ä–∞–≤–ª—è–µ–º—ã—Ö —á–∞—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞.")

dp = Dispatcher()
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))


# --- –§–£–ù–ö–¶–ò–ò –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò ---
def is_valid_init_data(init_data: str, bot_token: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å initData, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∏–∑ Telegram Web App."""
    try:
        parsed_data = dict(parse_qsl(init_data, keep_blank_values=True))
        received_hash = parsed_data.pop("hash")
        data_check_string = "\n".join(
            f"{k}={v}" for k, v in sorted(parsed_data.items())
        )
        secret_key = hmac.new("WebAppData".encode(), bot_token.encode(), hashlib.sha256).digest()
        calculated_hash = hmac.new(secret_key, data_check_string.encode(), hashlib.sha256).hexdigest()
        return calculated_hash == received_hash
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ initData: {e}")
        return False


# --- –§–ò–õ–¨–¢–† –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê ---
class AdminFilter(Filter):
    async def __call__(self, message: types.Message | types.CallbackQuery) -> bool:
        return message.from_user.id == ADMIN_ID


# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ë–û–¢–ê ---
@dp.my_chat_member()
async def on_my_chat_member(update: ChatMemberUpdated):
    global managed_chats
    chat_id = update.chat.id
    chat_title = update.chat.title

    # –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if update.new_chat_member.status == ChatMemberStatus.ADMINISTRATOR:
        if chat_id not in managed_chats:
            managed_chats[chat_id] = chat_title
            save_managed_chats(managed_chats)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
            logger.info(f"–ë–æ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ —á–∞—Ç–µ '{chat_title}' (ID: {chat_id}). –°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω.")
            try:
                await bot.send_message(ADMIN_ID, f"‚úÖ –Ø —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤ –≥—Ä—É–ø–ø–µ: <b>{chat_title}</b>.")
            except TelegramAPIError as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É: {e}")

    # –ë–æ—Ç —É–¥–∞–ª–µ–Ω –∏–ª–∏ –ª–∏—à–µ–Ω –ø—Ä–∞–≤
    elif update.new_chat_member.status in [ChatMemberStatus.MEMBER, ChatMemberStatus.LEFT, ChatMemberStatus.KICKED]:
        if chat_id in managed_chats:
            removed_chat_title = managed_chats.pop(chat_id)
            save_managed_chats(managed_chats)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
            logger.info(f"–ë–æ—Ç —É–¥–∞–ª–µ–Ω –∏–ª–∏ –ª–∏—à–µ–Ω –ø—Ä–∞–≤ –≤ —á–∞—Ç–µ '{removed_chat_title}'. –°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω.")
            try:
                await bot.send_message(ADMIN_ID, f"‚ùå –Ø –±–æ–ª—å—à–µ –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤ –≥—Ä—É–ø–ø–µ: <b>{removed_chat_title}</b>.")
            except TelegramAPIError as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É: {e}")


@dp.message(CommandStart(), AdminFilter())
async def command_start_admin(message: Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–∞–º–∏.")


@dp.message(Command("admin"), AdminFilter())
async def command_admin_panel(message: Message):
    if not managed_chats:
        await message.answer(
            "–Ø –ø–æ–∫–∞ –Ω–µ —É–ø—Ä–∞–≤–ª—è—é –Ω–∏ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–æ–π. –°–¥–µ–ª–∞–π—Ç–µ –º–µ–Ω—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ –Ω—É–∂–Ω–æ–π –≥—Ä—É–ø–ø–µ, –∏ —è –µ–µ –∑–∞–ø–æ–º–Ω—é.")
        return
    builder = InlineKeyboardBuilder()
    for chat_id, chat_title in managed_chats.items():
        builder.button(text=chat_title, callback_data=f"manage_chat_{chat_id}")
    builder.adjust(1)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", reply_markup=builder.as_markup())


@dp.callback_query(F.data.startswith("manage_chat_"), AdminFilter())
async def select_chat_callback(query: CallbackQuery):
    chat_id_str = query.data.split("_")[2]
    chat_id = int(chat_id_str)
    chat_title = managed_chats.get(chat_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–∞—Ç")
    url = f"{WEB_APP_URL.rstrip('/')}?chat_id={chat_id}"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text=f"üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å –¥–ª—è '{chat_title}'", web_app=WebAppInfo(url=url))
    ]])
    await query.message.answer(f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–æ–π <b>{chat_title}</b>.", reply_markup=keyboard)
    await query.answer()


@dp.message(F.web_app_data)
async def web_app_data_handler(message: Message):
    if message.from_user.id != ADMIN_ID:
        return
    try:
        data = json.loads(message.web_app_data.data)
        action = data.get("action")
        chat_id = int(data.get("chat_id"))
        user_id = int(data.get("user_id"))
        if action == 'kick':
            await bot.kick_chat_member(chat_id=chat_id, user_id=user_id)
            await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –±—ã–ª –∫–∏–∫–Ω—É—Ç –∏–∑ —á–∞—Ç–∞.")
        # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –¥–µ–π—Å—Ç–≤–∏—è (ban, mute...) –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Web App: {e}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")


# --- API –î–õ–Ø WEB APP ---
async def get_chat_info_handler(request: web.Request):
    auth_header = request.headers.get("Authorization")
    if not auth_header or not auth_header.startswith("tma "):
        return web.json_response({"error": "Authorization required"}, status=401)

    init_data = auth_header.split(" ", 1)[1]
    if not is_valid_init_data(init_data, BOT_TOKEN):
        return web.json_response({"error": "Invalid initData"}, status=403)

    user_info = json.loads(dict(parse_qsl(init_data)).get("user", "{}"))
    if not user_info or user_info.get("id") != ADMIN_ID:
        return web.json_response({"error": "Admin access required"}, status=403)

    chat_id_str = request.query.get("chat_id")
    if not chat_id_str:
        return web.json_response({"error": "chat_id is required"}, status=400)

    try:
        chat_id = int(chat_id_str)
        chat_info = await bot.get_chat(chat_id)
        admins = await bot.get_chat_administrators(chat_id)
        members = [
            {"id": admin.user.id, "name": admin.user.full_name, "username": admin.user.username or ""}
            for admin in admins
        ]
        return web.json_response({
            "chat_title": chat_info.title,
            "members": members
        })
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ {chat_id_str}: {e}")
        return web.json_response({"error": "Internal server error"}, status=500)


# --- –ó–ê–ü–£–°–ö –í–ï–ë-–°–ï–†–í–ï–†–ê –ò –ë–û–¢–ê ---
async def aiohttp_webhook_handler(request: web.Request):
    if request.headers.get("X-Telegram-Bot-Api-Secret-Token") != WEBHOOK_SECRET:
        return web.Response(status=403)

    update = types.Update.model_validate_json(await request.text(), context={"bot": bot})
    await dp.feed_update(bot, update)
    return web.Response()


async def on_startup(bot_instance: Bot):
    webhook_url = urljoin(BASE_WEBHOOK_URL.rstrip('/'), WEBHOOK_PATH)
    await bot_instance.set_webhook(url=webhook_url, secret_token=WEBHOOK_SECRET, drop_pending_updates=True)
    logger.info(f"–í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
    logger.info(f"URL –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {WEB_APP_URL}")


async def on_shutdown(bot_instance: Bot):
    await bot_instance.delete_webhook()
    logger.info("–í–µ–±—Ö—É–∫ —É–¥–∞–ª–µ–Ω.")


async def main():
    app = web.Application()
    app['bot'] = bot

    cors = aiohttp_cors.setup(app, defaults={
        "*": aiohttp_cors.ResourceOptions(
            allow_credentials=True, expose_headers="*", allow_headers="*", allow_methods="*"
        )
    })

    app.router.add_post(WEBHOOK_PATH, aiohttp_webhook_handler)
    api_route = app.router.add_get("/api/chat_info", get_chat_info_handler)
    cors.add(api_route)

    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)

    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, WEB_SERVER_HOST, WEB_SERVER_PORT)
    await site.start()

    logger.info(f"–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://{WEB_SERVER_HOST}:{WEB_SERVER_PORT}")
    await asyncio.Event().wait()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")